"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from types import ModuleType
from typing import Any, Mapping

CANONICAL = Mapping[str, str | CANONICAL]
def constrain_this_module(): # -> None:
    """Rewrites the current module in-place with annotation constraints."""
    ...

def load_module(path: Path, module_name: str) -> ModuleType:
    ...

def canonicalize(obj: Any) -> CANONICAL:
    """
    Canonicalize any object using the type normalization layer.
    For a module, returns a dict mapping names to canonicalized signatures/types.
    For a function or class, returns its canonical signature/type.
    For other objects, returns their normalized type.
    """
    ...

def canonical_signature(func: Any, name: str | None = ...) -> CANONICAL:
    ...

def is_compatible(a: ModuleType, b: ModuleType) -> bool:
    """
    Returns True if b is forward compatible with a (i.e., b can safely replace a).
    """
    ...

def pprint_recursive(obj, indent=...): # -> None:
    ...

